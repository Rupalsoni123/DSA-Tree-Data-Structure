#include<iostream>
#include<queue>
using namespace std;
struct node{
	int data;
	node *left,*right;
};
node *create(int data){
	node *newnode=new node();
	newnode->data=data;
	newnode->left=newnode->right=NULL;
	return newnode;
}
void inorder(node *temp){
		if(temp==NULL)
			return;
		inorder(temp->left);
		cout<<temp->data<<" ";
		inorder(temp->right);
	}
void deletedeepest(struct node *root,struct node *d_node){
		queue<struct node*>q;
		q.push(root);
	while(!q.empty()){
		node *temp=q.front();
		q.pop();
		if(temp==d_node){
			temp=NULL;
			delete(d_node);
			return;
		}
		if(temp->right){
			if(temp->right==d_node){
				temp->right=NULL;
				delete(d_node);
				return;
				
			}
			else
			q.push(temp->right);
		}
		if(temp->left){
			if(temp->left==d_node){
				temp->left=NULL;
				delete(d_node);
				return;	
			}
			else
			q.push(temp->left);
		}
	}
}
node *deltetion(struct node *root,int key){
	if(root==NULL)
		return NULL;
		if(root->left==NULL&&root->right==NULL){
			if(root->data==key)
		    return NULL;
		else
		return root;
		}
		queue<node*>q;
		q.push(root);
		struct node *newnode=NULL;
		node *temp;
	while(!q.empty()){
		temp=q.front();
		q.pop();
		if(temp->data==key)
		newnode=temp;
		if(temp->left)
		q.push(temp->left);
		if(temp->right)
		q.push(temp->right);
		
	}
	if(newnode!=NULL){
		int x=temp->data;
		deletedeepest(root,temp);
		newnode->data=x;
	}
	return root;
}
int main(){
	node *root=create(8);
	root->left=create(4);
	root->right=create(90);
	root->left->left=create(9);
	root->right->right=create(89);
	cout<<"the inorder traversal is ";
	inorder(root);
	cout<<endl;
	int key=9;
	root=deltetion(root,key);
	cout<<"the inrder traversal is ";
	inorder(root);
	cout<<endl;
}

#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node *left,*right;
};
struct node *create(int data){
	struct node *ptr=(struct node*)malloc(sizeof(struct node));
	ptr->data=data;
	ptr->left=ptr->right=NULL;
	return ptr;
}
struct node *search(struct node *root,int key){
	while(root!=NULL){
		if(key==root->data){
			return root;
		}
		else if(key<root->data){
			root=root->left;
		}
		else{
			root=root->right;
		}
	}
	return NULL;
	
}
void insert(struct node *root,int key){
	struct node *ptr=NULL;
	while(root!=NULL){
		ptr=root;
		if(key==root->data){
			printf("cannnot insert it");

		}
		else if(key<root->data){
			root=root->left;
		}
		else{
			root=root->right;
		}
	}
	struct node *n=create(key);
	if(key<ptr->data){
		ptr->left=n;
	}
	else{
		ptr->right=n;
	}
}
struct node *inorderprecessor(struct node *root){
	root=root->left;
	while(root->right!=NULL){
		root=root->right;
	}
	return root;
}
struct node *deletenode(struct node *root,int val){
	struct node *ptr;
	if(root==NULL){
		return NULL;
	}
	if(root->left==NULL&&root->right==NULL){
		free(root);
		return NULL;
	}
	if(val<root->data){
		root->left=deletenode(root->left,val);
		
	}
	else if(val>root->data){
		root->right=deletenode(root->right,val);
	}
	else{
		ptr=inorderprecessor(root);
		root->data=ptr->data;
		root->left=deletenode(root->left,ptr->data);
	}
	return root;
}
void inorder(struct node *root){
	if(root!=NULL){
		inorder(root->left);
	printf("%d\t",root->data);
	inorder(root->right);
	}
}
int main(){
	struct node *root=create(9);
	root->left=create(90);
	root->right=create(19);
	root->left->left=create(23);
	root->right->right=create(89);
	inorder(root);
	printf("\n");
	printf("the inorder traversal after delteion\t");
	root=deletenode(root,9);
	inorder(root);
}





